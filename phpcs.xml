<?xml version="1.0" encoding="UTF-8"?>
<phpcs>
    <!--
        Contact Form 7 to API - PHP Coding Standards Configuration
        
        This configuration enforces the coding standards defined in our 
        project instructions, specifically:
        
        ðŸš¨ MANDATORY STANDARDS:
        - ALL strings MUST use double quotes: "string" not 'string'
        - WordPress security best practices (escaping, sanitization)
        - Text domain validation for i18n functions
        - PSR-12 compliance for modern PHP 8+ conventions
        - Proper documentation standards for public APIs
        
        Package-specific allowances:
        - PSR-4 naming conventions (not WordPress file naming)
        - Namespace usage instead of global prefixes
        - String interpolation with variables in double quotes
        - Reasonable line length limits (120/160 characters)
    -->
    <arg name="basepath" value="."/>
    <arg name="cache" value=".phpcs-cache"/>
    <arg name="colors"/>
    <arg name="extensions" value="php"/>
    <arg name="parallel" value="80"/>
    <arg value="p"/>

    <!-- Show progress -->
    <arg value="s"/>

    <!-- Paths to check -->
    <file>src</file>
    <file>tests</file>
    <file>contact-form-to-api.php</file>

    <!-- Base PSR12 standard -->
    <rule ref="PSR12"/>

    <!-- ðŸš¨ CRITICAL RULE: Enforce double quotes for strings -->
    <!-- This is our MANDATORY string quotation standard -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage">
        <exclude name="Squiz.Strings.DoubleQuoteUsage.NotRequired"/>
        <!-- Allow variables in double quotes (string interpolation) -->
        <exclude name="Squiz.Strings.DoubleQuoteUsage.ContainsVar"/>
    </rule>

    <!-- WordPress Security (Critical for WordPress integration) -->
    <rule ref="WordPress.Security.EscapeOutput"/>
    <rule ref="WordPress.Security.ValidatedSanitizedInput"/>
    <rule ref="WordPress.Security.NonceVerification"/>

    <!-- WordPress i18n (Text domain validation) -->
    <rule ref="WordPress.WP.I18n">
        <properties>
            <property name="text_domain" type="array">
                <element value="contact-form-to-api"/>
            </property>
        </properties>
        <!-- Allow dynamic text domains from configuration -->
        <exclude name="WordPress.WP.I18n.NonSingularStringLiteralText"/>
        <exclude name="WordPress.WP.I18n.NonSingularStringLiteralDomain"/>
    </rule>

    <!-- WordPress Best Practices for CF7 Integration -->
    <rule ref="WordPress.DB.DirectDatabaseQuery">
        <type>warning</type> <!-- Allow for logging functionality -->
    </rule>
    
    <rule ref="WordPress.WP.GlobalVariablesOverride"/>
    <rule ref="WordPress.WP.DiscouragedFunctions"/>

    <!-- Basic Documentation (without overly strict requirements) -->
    <rule ref="Squiz.Commenting.ClassComment">
        <exclude name="Squiz.Commenting.ClassComment.TagNotAllowed"/>
        <!-- Allow test classes without doc comments -->
        <exclude-pattern>tests/*</exclude-pattern>
    </rule>
    
    <rule ref="Squiz.Commenting.FunctionComment">
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamTag"/>
        <exclude name="Squiz.Commenting.FunctionComment.TypeHintMissing"/>
        <!-- Require function comments for public methods only -->
        <exclude-pattern>tests/*</exclude-pattern>
    </rule>
    
    <!-- Allow WordPress-style method naming for i18n wrappers and CF7 hooks -->
    <rule ref="PSR1.Methods.CamelCapsMethodName">
        <exclude name="PSR1.Methods.CamelCapsMethodName.NotCamelCaps"/>
        <type>warning</type> <!-- Make this a warning instead of error -->
    </rule>
    
    <!-- Allow flexibility for package-specific conventions -->
    <rule ref="WordPress.Files.FileName">
        <severity>0</severity> <!-- PSR-4 naming -->
    </rule>
    
    <rule ref="WordPress.NamingConventions.PrefixAllGlobals">
        <severity>0</severity> <!-- Namespaced package -->
    </rule>

    <rule ref="PSR1.Files.SideEffects">
        <severity>0</severity> <!-- Test files can have side effects -->
    </rule>

    <!-- Allow reasonable line lengths for readability -->
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="120"/>
            <property name="absoluteLineLimit" value="160"/>
        </properties>
    </rule>

    <!-- WordPress PHP Compatibility -->
    <rule ref="PHPCompatibilityWP"/>

    <!-- Contact Form 7 specific allowances -->
    <rule ref="WordPress.Security.ValidatedSanitizedInput">
        <!-- CF7 handles its own validation for form data -->
        <exclude name="WordPress.Security.ValidatedSanitizedInput.InputNotSanitized"/>
        <exclude name="WordPress.Security.ValidatedSanitizedInput.MissingUnslash"/>
    </rule>

    <!-- Exclude external dependencies and generated files -->
    <exclude-pattern>vendor/*</exclude-pattern>
    <exclude-pattern>node_modules/*</exclude-pattern>
    <exclude-pattern>*.min.*</exclude-pattern>
    <exclude-pattern>languages/*</exclude-pattern>
    <exclude-pattern>assets/css/*</exclude-pattern>
    <exclude-pattern>assets/js/*</exclude-pattern>
    <exclude-pattern>.phpcs-cache/*</exclude-pattern>
</phpcs>
